Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> initializations if
Rule 2     initializations -> initialization initializations
Rule 3     initializations -> <empty>
Rule 4     initialization -> ID ASSIGN expression SEMI
Rule 5     assignments -> assignment assignments
Rule 6     assignments -> LBRACE assignments RBRACE
Rule 7     assignments -> <empty>
Rule 8     assignment -> ID ASSIGN expression SEMI
Rule 9     assignment -> ID INCRE SEMI
Rule 10    assignment -> ID DECRE SEMI
Rule 11    assignment -> ID PE NUMBER SEMI
Rule 12    assignment -> ID ME NUMBER SEMI
Rule 13    condition -> expression cmpop expression
Rule 14    condition -> NOT LPAREN condition RPAREN
Rule 15    condition -> AND LPAREN condition_list RPAREN
Rule 16    condition -> TRUE
Rule 17    condition -> OR LPAREN condition_list RPAREN
Rule 18    condition_list -> condition COMMA condition_list
Rule 19    condition_list -> condition
Rule 20    cmpop -> GT
Rule 21    cmpop -> GE
Rule 22    cmpop -> LT
Rule 23    cmpop -> LE
Rule 24    cmpop -> EQ
Rule 25    cmpop -> NE
Rule 26    if -> IF LPAREN condition RPAREN assignments
Rule 27    if -> IF LPAREN condition RPAREN assignments ELSE assignments
Rule 28    if -> IF LPAREN condition RPAREN assignments ELSE if
Rule 29    expression -> expression PLUS factor
Rule 30    expression -> expression MINUS factor
Rule 31    expression -> factor
Rule 32    factor -> factor TIMES unary_expression
Rule 33    factor -> factor MOD unary_expression
Rule 34    factor -> unary_expression
Rule 35    factor -> factor DIV unary_expression
Rule 36    unary_expression -> PLUS symbol_number
Rule 37    unary_expression -> MINUS symbol_number
Rule 38    unary_expression -> symbol_number
Rule 39    unary_expression -> LPAREN expression RPAREN
Rule 40    symbol_number -> NUMBER
Rule 41    symbol_number -> ID

Terminals, with rules where they appear

AND                  : 15
ASSIGN               : 4 8
COMMA                : 18
DECRE                : 10
DIV                  : 35
ELSE                 : 27 28
EQ                   : 24
GE                   : 21
GT                   : 20
ID                   : 4 8 9 10 11 12 41
IF                   : 26 27 28
INCRE                : 9
LBRACE               : 6
LE                   : 23
LPAREN               : 14 15 17 26 27 28 39
LT                   : 22
ME                   : 12
MINUS                : 30 37
MOD                  : 33
NE                   : 25
NOT                  : 14
NUMBER               : 11 12 40
OR                   : 17
PE                   : 11
PLUS                 : 29 36
RBRACE               : 6
RPAREN               : 14 15 17 26 27 28 39
SEMI                 : 4 8 9 10 11 12
TIMES                : 32
TRUE                 : 16
error                : 

Nonterminals, with rules where they appear

assignment           : 5
assignments          : 5 6 26 27 27 28
cmpop                : 13
condition            : 14 18 19 26 27 28
condition_list       : 15 17 18
expression           : 4 8 13 13 29 30 39
factor               : 29 30 31 32 33 35
if                   : 1 28
initialization       : 2
initializations      : 1 2
program              : 0
symbol_number        : 36 37 38
unary_expression     : 32 33 34 35

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . initializations if
    (2) initializations -> . initialization initializations
    (3) initializations -> .
    (4) initialization -> . ID ASSIGN expression SEMI

    IF              reduce using rule 3 (initializations -> .)
    ID              shift and go to state 4

    program                        shift and go to state 1
    initializations                shift and go to state 2
    initialization                 shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> initializations . if
    (26) if -> . IF LPAREN condition RPAREN assignments
    (27) if -> . IF LPAREN condition RPAREN assignments ELSE assignments
    (28) if -> . IF LPAREN condition RPAREN assignments ELSE if

    IF              shift and go to state 6

    if                             shift and go to state 5

state 3

    (2) initializations -> initialization . initializations
    (2) initializations -> . initialization initializations
    (3) initializations -> .
    (4) initialization -> . ID ASSIGN expression SEMI

    IF              reduce using rule 3 (initializations -> .)
    ID              shift and go to state 4

    initialization                 shift and go to state 3
    initializations                shift and go to state 7

state 4

    (4) initialization -> ID . ASSIGN expression SEMI

    ASSIGN          shift and go to state 8


state 5

    (1) program -> initializations if .

    $end            reduce using rule 1 (program -> initializations if .)


state 6

    (26) if -> IF . LPAREN condition RPAREN assignments
    (27) if -> IF . LPAREN condition RPAREN assignments ELSE assignments
    (28) if -> IF . LPAREN condition RPAREN assignments ELSE if

    LPAREN          shift and go to state 9


state 7

    (2) initializations -> initialization initializations .

    IF              reduce using rule 2 (initializations -> initialization initializations .)


state 8

    (4) initialization -> ID ASSIGN . expression SEMI
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    expression                     shift and go to state 11
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 9

    (26) if -> IF LPAREN . condition RPAREN assignments
    (27) if -> IF LPAREN . condition RPAREN assignments ELSE assignments
    (28) if -> IF LPAREN . condition RPAREN assignments ELSE if
    (13) condition -> . expression cmpop expression
    (14) condition -> . NOT LPAREN condition RPAREN
    (15) condition -> . AND LPAREN condition_list RPAREN
    (16) condition -> . TRUE
    (17) condition -> . OR LPAREN condition_list RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NOT             shift and go to state 21
    AND             shift and go to state 22
    TRUE            shift and go to state 23
    OR              shift and go to state 24
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    condition                      shift and go to state 19
    expression                     shift and go to state 20
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 10

    (41) symbol_number -> ID .

    TIMES           reduce using rule 41 (symbol_number -> ID .)
    MOD             reduce using rule 41 (symbol_number -> ID .)
    DIV             reduce using rule 41 (symbol_number -> ID .)
    SEMI            reduce using rule 41 (symbol_number -> ID .)
    PLUS            reduce using rule 41 (symbol_number -> ID .)
    MINUS           reduce using rule 41 (symbol_number -> ID .)
    GT              reduce using rule 41 (symbol_number -> ID .)
    GE              reduce using rule 41 (symbol_number -> ID .)
    LT              reduce using rule 41 (symbol_number -> ID .)
    LE              reduce using rule 41 (symbol_number -> ID .)
    EQ              reduce using rule 41 (symbol_number -> ID .)
    NE              reduce using rule 41 (symbol_number -> ID .)
    RPAREN          reduce using rule 41 (symbol_number -> ID .)
    COMMA           reduce using rule 41 (symbol_number -> ID .)


state 11

    (4) initialization -> ID ASSIGN expression . SEMI
    (29) expression -> expression . PLUS factor
    (30) expression -> expression . MINUS factor

    SEMI            shift and go to state 25
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 12

    (36) unary_expression -> PLUS . symbol_number
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    symbol_number                  shift and go to state 28

state 13

    (31) expression -> factor .
    (32) factor -> factor . TIMES unary_expression
    (33) factor -> factor . MOD unary_expression
    (35) factor -> factor . DIV unary_expression

    SEMI            reduce using rule 31 (expression -> factor .)
    PLUS            reduce using rule 31 (expression -> factor .)
    MINUS           reduce using rule 31 (expression -> factor .)
    GT              reduce using rule 31 (expression -> factor .)
    GE              reduce using rule 31 (expression -> factor .)
    LT              reduce using rule 31 (expression -> factor .)
    LE              reduce using rule 31 (expression -> factor .)
    EQ              reduce using rule 31 (expression -> factor .)
    NE              reduce using rule 31 (expression -> factor .)
    RPAREN          reduce using rule 31 (expression -> factor .)
    COMMA           reduce using rule 31 (expression -> factor .)
    TIMES           shift and go to state 29
    MOD             shift and go to state 30
    DIV             shift and go to state 31


state 14

    (37) unary_expression -> MINUS . symbol_number
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    symbol_number                  shift and go to state 32

state 15

    (34) factor -> unary_expression .

    TIMES           reduce using rule 34 (factor -> unary_expression .)
    MOD             reduce using rule 34 (factor -> unary_expression .)
    DIV             reduce using rule 34 (factor -> unary_expression .)
    SEMI            reduce using rule 34 (factor -> unary_expression .)
    PLUS            reduce using rule 34 (factor -> unary_expression .)
    MINUS           reduce using rule 34 (factor -> unary_expression .)
    GT              reduce using rule 34 (factor -> unary_expression .)
    GE              reduce using rule 34 (factor -> unary_expression .)
    LT              reduce using rule 34 (factor -> unary_expression .)
    LE              reduce using rule 34 (factor -> unary_expression .)
    EQ              reduce using rule 34 (factor -> unary_expression .)
    NE              reduce using rule 34 (factor -> unary_expression .)
    RPAREN          reduce using rule 34 (factor -> unary_expression .)
    COMMA           reduce using rule 34 (factor -> unary_expression .)


state 16

    (38) unary_expression -> symbol_number .

    TIMES           reduce using rule 38 (unary_expression -> symbol_number .)
    MOD             reduce using rule 38 (unary_expression -> symbol_number .)
    DIV             reduce using rule 38 (unary_expression -> symbol_number .)
    SEMI            reduce using rule 38 (unary_expression -> symbol_number .)
    PLUS            reduce using rule 38 (unary_expression -> symbol_number .)
    MINUS           reduce using rule 38 (unary_expression -> symbol_number .)
    GT              reduce using rule 38 (unary_expression -> symbol_number .)
    GE              reduce using rule 38 (unary_expression -> symbol_number .)
    LT              reduce using rule 38 (unary_expression -> symbol_number .)
    LE              reduce using rule 38 (unary_expression -> symbol_number .)
    EQ              reduce using rule 38 (unary_expression -> symbol_number .)
    NE              reduce using rule 38 (unary_expression -> symbol_number .)
    RPAREN          reduce using rule 38 (unary_expression -> symbol_number .)
    COMMA           reduce using rule 38 (unary_expression -> symbol_number .)


state 17

    (39) unary_expression -> LPAREN . expression RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    expression                     shift and go to state 33
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 18

    (40) symbol_number -> NUMBER .

    TIMES           reduce using rule 40 (symbol_number -> NUMBER .)
    MOD             reduce using rule 40 (symbol_number -> NUMBER .)
    DIV             reduce using rule 40 (symbol_number -> NUMBER .)
    SEMI            reduce using rule 40 (symbol_number -> NUMBER .)
    PLUS            reduce using rule 40 (symbol_number -> NUMBER .)
    MINUS           reduce using rule 40 (symbol_number -> NUMBER .)
    GT              reduce using rule 40 (symbol_number -> NUMBER .)
    GE              reduce using rule 40 (symbol_number -> NUMBER .)
    LT              reduce using rule 40 (symbol_number -> NUMBER .)
    LE              reduce using rule 40 (symbol_number -> NUMBER .)
    EQ              reduce using rule 40 (symbol_number -> NUMBER .)
    NE              reduce using rule 40 (symbol_number -> NUMBER .)
    RPAREN          reduce using rule 40 (symbol_number -> NUMBER .)
    COMMA           reduce using rule 40 (symbol_number -> NUMBER .)


state 19

    (26) if -> IF LPAREN condition . RPAREN assignments
    (27) if -> IF LPAREN condition . RPAREN assignments ELSE assignments
    (28) if -> IF LPAREN condition . RPAREN assignments ELSE if

    RPAREN          shift and go to state 34


state 20

    (13) condition -> expression . cmpop expression
    (29) expression -> expression . PLUS factor
    (30) expression -> expression . MINUS factor
    (20) cmpop -> . GT
    (21) cmpop -> . GE
    (22) cmpop -> . LT
    (23) cmpop -> . LE
    (24) cmpop -> . EQ
    (25) cmpop -> . NE

    PLUS            shift and go to state 26
    MINUS           shift and go to state 27
    GT              shift and go to state 36
    GE              shift and go to state 37
    LT              shift and go to state 38
    LE              shift and go to state 39
    EQ              shift and go to state 40
    NE              shift and go to state 41

    cmpop                          shift and go to state 35

state 21

    (14) condition -> NOT . LPAREN condition RPAREN

    LPAREN          shift and go to state 42


state 22

    (15) condition -> AND . LPAREN condition_list RPAREN

    LPAREN          shift and go to state 43


state 23

    (16) condition -> TRUE .

    RPAREN          reduce using rule 16 (condition -> TRUE .)
    COMMA           reduce using rule 16 (condition -> TRUE .)


state 24

    (17) condition -> OR . LPAREN condition_list RPAREN

    LPAREN          shift and go to state 44


state 25

    (4) initialization -> ID ASSIGN expression SEMI .

    ID              reduce using rule 4 (initialization -> ID ASSIGN expression SEMI .)
    IF              reduce using rule 4 (initialization -> ID ASSIGN expression SEMI .)


state 26

    (29) expression -> expression PLUS . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    factor                         shift and go to state 45
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 27

    (30) expression -> expression MINUS . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    factor                         shift and go to state 46
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 28

    (36) unary_expression -> PLUS symbol_number .

    TIMES           reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    MOD             reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    DIV             reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    SEMI            reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    PLUS            reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    MINUS           reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    GT              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    GE              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    LT              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    LE              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    EQ              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    NE              reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    RPAREN          reduce using rule 36 (unary_expression -> PLUS symbol_number .)
    COMMA           reduce using rule 36 (unary_expression -> PLUS symbol_number .)


state 29

    (32) factor -> factor TIMES . unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    unary_expression               shift and go to state 47
    symbol_number                  shift and go to state 16

state 30

    (33) factor -> factor MOD . unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    unary_expression               shift and go to state 48
    symbol_number                  shift and go to state 16

state 31

    (35) factor -> factor DIV . unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    unary_expression               shift and go to state 49
    symbol_number                  shift and go to state 16

state 32

    (37) unary_expression -> MINUS symbol_number .

    TIMES           reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    MOD             reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    DIV             reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    SEMI            reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    PLUS            reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    MINUS           reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    GT              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    GE              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    LT              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    LE              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    EQ              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    NE              reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    RPAREN          reduce using rule 37 (unary_expression -> MINUS symbol_number .)
    COMMA           reduce using rule 37 (unary_expression -> MINUS symbol_number .)


state 33

    (39) unary_expression -> LPAREN expression . RPAREN
    (29) expression -> expression . PLUS factor
    (30) expression -> expression . MINUS factor

    RPAREN          shift and go to state 50
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 34

    (26) if -> IF LPAREN condition RPAREN . assignments
    (27) if -> IF LPAREN condition RPAREN . assignments ELSE assignments
    (28) if -> IF LPAREN condition RPAREN . assignments ELSE if
    (5) assignments -> . assignment assignments
    (6) assignments -> . LBRACE assignments RBRACE
    (7) assignments -> .
    (8) assignment -> . ID ASSIGN expression SEMI
    (9) assignment -> . ID INCRE SEMI
    (10) assignment -> . ID DECRE SEMI
    (11) assignment -> . ID PE NUMBER SEMI
    (12) assignment -> . ID ME NUMBER SEMI

    LBRACE          shift and go to state 53
    ELSE            reduce using rule 7 (assignments -> .)
    $end            reduce using rule 7 (assignments -> .)
    ID              shift and go to state 54

    assignments                    shift and go to state 51
    assignment                     shift and go to state 52

state 35

    (13) condition -> expression cmpop . expression
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    expression                     shift and go to state 55
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 36

    (20) cmpop -> GT .

    PLUS            reduce using rule 20 (cmpop -> GT .)
    MINUS           reduce using rule 20 (cmpop -> GT .)
    LPAREN          reduce using rule 20 (cmpop -> GT .)
    NUMBER          reduce using rule 20 (cmpop -> GT .)
    ID              reduce using rule 20 (cmpop -> GT .)


state 37

    (21) cmpop -> GE .

    PLUS            reduce using rule 21 (cmpop -> GE .)
    MINUS           reduce using rule 21 (cmpop -> GE .)
    LPAREN          reduce using rule 21 (cmpop -> GE .)
    NUMBER          reduce using rule 21 (cmpop -> GE .)
    ID              reduce using rule 21 (cmpop -> GE .)


state 38

    (22) cmpop -> LT .

    PLUS            reduce using rule 22 (cmpop -> LT .)
    MINUS           reduce using rule 22 (cmpop -> LT .)
    LPAREN          reduce using rule 22 (cmpop -> LT .)
    NUMBER          reduce using rule 22 (cmpop -> LT .)
    ID              reduce using rule 22 (cmpop -> LT .)


state 39

    (23) cmpop -> LE .

    PLUS            reduce using rule 23 (cmpop -> LE .)
    MINUS           reduce using rule 23 (cmpop -> LE .)
    LPAREN          reduce using rule 23 (cmpop -> LE .)
    NUMBER          reduce using rule 23 (cmpop -> LE .)
    ID              reduce using rule 23 (cmpop -> LE .)


state 40

    (24) cmpop -> EQ .

    PLUS            reduce using rule 24 (cmpop -> EQ .)
    MINUS           reduce using rule 24 (cmpop -> EQ .)
    LPAREN          reduce using rule 24 (cmpop -> EQ .)
    NUMBER          reduce using rule 24 (cmpop -> EQ .)
    ID              reduce using rule 24 (cmpop -> EQ .)


state 41

    (25) cmpop -> NE .

    PLUS            reduce using rule 25 (cmpop -> NE .)
    MINUS           reduce using rule 25 (cmpop -> NE .)
    LPAREN          reduce using rule 25 (cmpop -> NE .)
    NUMBER          reduce using rule 25 (cmpop -> NE .)
    ID              reduce using rule 25 (cmpop -> NE .)


state 42

    (14) condition -> NOT LPAREN . condition RPAREN
    (13) condition -> . expression cmpop expression
    (14) condition -> . NOT LPAREN condition RPAREN
    (15) condition -> . AND LPAREN condition_list RPAREN
    (16) condition -> . TRUE
    (17) condition -> . OR LPAREN condition_list RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NOT             shift and go to state 21
    AND             shift and go to state 22
    TRUE            shift and go to state 23
    OR              shift and go to state 24
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    condition                      shift and go to state 56
    expression                     shift and go to state 20
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 43

    (15) condition -> AND LPAREN . condition_list RPAREN
    (18) condition_list -> . condition COMMA condition_list
    (19) condition_list -> . condition
    (13) condition -> . expression cmpop expression
    (14) condition -> . NOT LPAREN condition RPAREN
    (15) condition -> . AND LPAREN condition_list RPAREN
    (16) condition -> . TRUE
    (17) condition -> . OR LPAREN condition_list RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NOT             shift and go to state 21
    AND             shift and go to state 22
    TRUE            shift and go to state 23
    OR              shift and go to state 24
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    condition_list                 shift and go to state 57
    condition                      shift and go to state 58
    expression                     shift and go to state 20
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 44

    (17) condition -> OR LPAREN . condition_list RPAREN
    (18) condition_list -> . condition COMMA condition_list
    (19) condition_list -> . condition
    (13) condition -> . expression cmpop expression
    (14) condition -> . NOT LPAREN condition RPAREN
    (15) condition -> . AND LPAREN condition_list RPAREN
    (16) condition -> . TRUE
    (17) condition -> . OR LPAREN condition_list RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NOT             shift and go to state 21
    AND             shift and go to state 22
    TRUE            shift and go to state 23
    OR              shift and go to state 24
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    condition_list                 shift and go to state 59
    condition                      shift and go to state 58
    expression                     shift and go to state 20
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 45

    (29) expression -> expression PLUS factor .
    (32) factor -> factor . TIMES unary_expression
    (33) factor -> factor . MOD unary_expression
    (35) factor -> factor . DIV unary_expression

    SEMI            reduce using rule 29 (expression -> expression PLUS factor .)
    PLUS            reduce using rule 29 (expression -> expression PLUS factor .)
    MINUS           reduce using rule 29 (expression -> expression PLUS factor .)
    GT              reduce using rule 29 (expression -> expression PLUS factor .)
    GE              reduce using rule 29 (expression -> expression PLUS factor .)
    LT              reduce using rule 29 (expression -> expression PLUS factor .)
    LE              reduce using rule 29 (expression -> expression PLUS factor .)
    EQ              reduce using rule 29 (expression -> expression PLUS factor .)
    NE              reduce using rule 29 (expression -> expression PLUS factor .)
    RPAREN          reduce using rule 29 (expression -> expression PLUS factor .)
    COMMA           reduce using rule 29 (expression -> expression PLUS factor .)
    TIMES           shift and go to state 29
    MOD             shift and go to state 30
    DIV             shift and go to state 31


state 46

    (30) expression -> expression MINUS factor .
    (32) factor -> factor . TIMES unary_expression
    (33) factor -> factor . MOD unary_expression
    (35) factor -> factor . DIV unary_expression

    SEMI            reduce using rule 30 (expression -> expression MINUS factor .)
    PLUS            reduce using rule 30 (expression -> expression MINUS factor .)
    MINUS           reduce using rule 30 (expression -> expression MINUS factor .)
    GT              reduce using rule 30 (expression -> expression MINUS factor .)
    GE              reduce using rule 30 (expression -> expression MINUS factor .)
    LT              reduce using rule 30 (expression -> expression MINUS factor .)
    LE              reduce using rule 30 (expression -> expression MINUS factor .)
    EQ              reduce using rule 30 (expression -> expression MINUS factor .)
    NE              reduce using rule 30 (expression -> expression MINUS factor .)
    RPAREN          reduce using rule 30 (expression -> expression MINUS factor .)
    COMMA           reduce using rule 30 (expression -> expression MINUS factor .)
    TIMES           shift and go to state 29
    MOD             shift and go to state 30
    DIV             shift and go to state 31


state 47

    (32) factor -> factor TIMES unary_expression .

    TIMES           reduce using rule 32 (factor -> factor TIMES unary_expression .)
    MOD             reduce using rule 32 (factor -> factor TIMES unary_expression .)
    DIV             reduce using rule 32 (factor -> factor TIMES unary_expression .)
    SEMI            reduce using rule 32 (factor -> factor TIMES unary_expression .)
    PLUS            reduce using rule 32 (factor -> factor TIMES unary_expression .)
    MINUS           reduce using rule 32 (factor -> factor TIMES unary_expression .)
    GT              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    GE              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    LT              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    LE              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    EQ              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    NE              reduce using rule 32 (factor -> factor TIMES unary_expression .)
    RPAREN          reduce using rule 32 (factor -> factor TIMES unary_expression .)
    COMMA           reduce using rule 32 (factor -> factor TIMES unary_expression .)


state 48

    (33) factor -> factor MOD unary_expression .

    TIMES           reduce using rule 33 (factor -> factor MOD unary_expression .)
    MOD             reduce using rule 33 (factor -> factor MOD unary_expression .)
    DIV             reduce using rule 33 (factor -> factor MOD unary_expression .)
    SEMI            reduce using rule 33 (factor -> factor MOD unary_expression .)
    PLUS            reduce using rule 33 (factor -> factor MOD unary_expression .)
    MINUS           reduce using rule 33 (factor -> factor MOD unary_expression .)
    GT              reduce using rule 33 (factor -> factor MOD unary_expression .)
    GE              reduce using rule 33 (factor -> factor MOD unary_expression .)
    LT              reduce using rule 33 (factor -> factor MOD unary_expression .)
    LE              reduce using rule 33 (factor -> factor MOD unary_expression .)
    EQ              reduce using rule 33 (factor -> factor MOD unary_expression .)
    NE              reduce using rule 33 (factor -> factor MOD unary_expression .)
    RPAREN          reduce using rule 33 (factor -> factor MOD unary_expression .)
    COMMA           reduce using rule 33 (factor -> factor MOD unary_expression .)


state 49

    (35) factor -> factor DIV unary_expression .

    TIMES           reduce using rule 35 (factor -> factor DIV unary_expression .)
    MOD             reduce using rule 35 (factor -> factor DIV unary_expression .)
    DIV             reduce using rule 35 (factor -> factor DIV unary_expression .)
    SEMI            reduce using rule 35 (factor -> factor DIV unary_expression .)
    PLUS            reduce using rule 35 (factor -> factor DIV unary_expression .)
    MINUS           reduce using rule 35 (factor -> factor DIV unary_expression .)
    GT              reduce using rule 35 (factor -> factor DIV unary_expression .)
    GE              reduce using rule 35 (factor -> factor DIV unary_expression .)
    LT              reduce using rule 35 (factor -> factor DIV unary_expression .)
    LE              reduce using rule 35 (factor -> factor DIV unary_expression .)
    EQ              reduce using rule 35 (factor -> factor DIV unary_expression .)
    NE              reduce using rule 35 (factor -> factor DIV unary_expression .)
    RPAREN          reduce using rule 35 (factor -> factor DIV unary_expression .)
    COMMA           reduce using rule 35 (factor -> factor DIV unary_expression .)


state 50

    (39) unary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (unary_expression -> LPAREN expression RPAREN .)


state 51

    (26) if -> IF LPAREN condition RPAREN assignments .
    (27) if -> IF LPAREN condition RPAREN assignments . ELSE assignments
    (28) if -> IF LPAREN condition RPAREN assignments . ELSE if

    $end            reduce using rule 26 (if -> IF LPAREN condition RPAREN assignments .)
    ELSE            shift and go to state 60


state 52

    (5) assignments -> assignment . assignments
    (5) assignments -> . assignment assignments
    (6) assignments -> . LBRACE assignments RBRACE
    (7) assignments -> .
    (8) assignment -> . ID ASSIGN expression SEMI
    (9) assignment -> . ID INCRE SEMI
    (10) assignment -> . ID DECRE SEMI
    (11) assignment -> . ID PE NUMBER SEMI
    (12) assignment -> . ID ME NUMBER SEMI

    LBRACE          shift and go to state 53
    ELSE            reduce using rule 7 (assignments -> .)
    $end            reduce using rule 7 (assignments -> .)
    RBRACE          reduce using rule 7 (assignments -> .)
    ID              shift and go to state 54

    assignment                     shift and go to state 52
    assignments                    shift and go to state 61

state 53

    (6) assignments -> LBRACE . assignments RBRACE
    (5) assignments -> . assignment assignments
    (6) assignments -> . LBRACE assignments RBRACE
    (7) assignments -> .
    (8) assignment -> . ID ASSIGN expression SEMI
    (9) assignment -> . ID INCRE SEMI
    (10) assignment -> . ID DECRE SEMI
    (11) assignment -> . ID PE NUMBER SEMI
    (12) assignment -> . ID ME NUMBER SEMI

    LBRACE          shift and go to state 53
    RBRACE          reduce using rule 7 (assignments -> .)
    ID              shift and go to state 54

    assignments                    shift and go to state 62
    assignment                     shift and go to state 52

state 54

    (8) assignment -> ID . ASSIGN expression SEMI
    (9) assignment -> ID . INCRE SEMI
    (10) assignment -> ID . DECRE SEMI
    (11) assignment -> ID . PE NUMBER SEMI
    (12) assignment -> ID . ME NUMBER SEMI

    ASSIGN          shift and go to state 63
    INCRE           shift and go to state 64
    DECRE           shift and go to state 65
    PE              shift and go to state 66
    ME              shift and go to state 67


state 55

    (13) condition -> expression cmpop expression .
    (29) expression -> expression . PLUS factor
    (30) expression -> expression . MINUS factor

    RPAREN          reduce using rule 13 (condition -> expression cmpop expression .)
    COMMA           reduce using rule 13 (condition -> expression cmpop expression .)
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 56

    (14) condition -> NOT LPAREN condition . RPAREN

    RPAREN          shift and go to state 68


state 57

    (15) condition -> AND LPAREN condition_list . RPAREN

    RPAREN          shift and go to state 69


state 58

    (18) condition_list -> condition . COMMA condition_list
    (19) condition_list -> condition .

    COMMA           shift and go to state 70
    RPAREN          reduce using rule 19 (condition_list -> condition .)


state 59

    (17) condition -> OR LPAREN condition_list . RPAREN

    RPAREN          shift and go to state 71


state 60

    (27) if -> IF LPAREN condition RPAREN assignments ELSE . assignments
    (28) if -> IF LPAREN condition RPAREN assignments ELSE . if
    (5) assignments -> . assignment assignments
    (6) assignments -> . LBRACE assignments RBRACE
    (7) assignments -> .
    (26) if -> . IF LPAREN condition RPAREN assignments
    (27) if -> . IF LPAREN condition RPAREN assignments ELSE assignments
    (28) if -> . IF LPAREN condition RPAREN assignments ELSE if
    (8) assignment -> . ID ASSIGN expression SEMI
    (9) assignment -> . ID INCRE SEMI
    (10) assignment -> . ID DECRE SEMI
    (11) assignment -> . ID PE NUMBER SEMI
    (12) assignment -> . ID ME NUMBER SEMI

    LBRACE          shift and go to state 53
    $end            reduce using rule 7 (assignments -> .)
    IF              shift and go to state 6
    ID              shift and go to state 54

    assignments                    shift and go to state 72
    if                             shift and go to state 73
    assignment                     shift and go to state 52

state 61

    (5) assignments -> assignment assignments .

    ELSE            reduce using rule 5 (assignments -> assignment assignments .)
    $end            reduce using rule 5 (assignments -> assignment assignments .)
    RBRACE          reduce using rule 5 (assignments -> assignment assignments .)


state 62

    (6) assignments -> LBRACE assignments . RBRACE

    RBRACE          shift and go to state 74


state 63

    (8) assignment -> ID ASSIGN . expression SEMI
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    expression                     shift and go to state 75
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 64

    (9) assignment -> ID INCRE . SEMI

    SEMI            shift and go to state 76


state 65

    (10) assignment -> ID DECRE . SEMI

    SEMI            shift and go to state 77


state 66

    (11) assignment -> ID PE . NUMBER SEMI

    NUMBER          shift and go to state 78


state 67

    (12) assignment -> ID ME . NUMBER SEMI

    NUMBER          shift and go to state 79


state 68

    (14) condition -> NOT LPAREN condition RPAREN .

    RPAREN          reduce using rule 14 (condition -> NOT LPAREN condition RPAREN .)
    COMMA           reduce using rule 14 (condition -> NOT LPAREN condition RPAREN .)


state 69

    (15) condition -> AND LPAREN condition_list RPAREN .

    RPAREN          reduce using rule 15 (condition -> AND LPAREN condition_list RPAREN .)
    COMMA           reduce using rule 15 (condition -> AND LPAREN condition_list RPAREN .)


state 70

    (18) condition_list -> condition COMMA . condition_list
    (18) condition_list -> . condition COMMA condition_list
    (19) condition_list -> . condition
    (13) condition -> . expression cmpop expression
    (14) condition -> . NOT LPAREN condition RPAREN
    (15) condition -> . AND LPAREN condition_list RPAREN
    (16) condition -> . TRUE
    (17) condition -> . OR LPAREN condition_list RPAREN
    (29) expression -> . expression PLUS factor
    (30) expression -> . expression MINUS factor
    (31) expression -> . factor
    (32) factor -> . factor TIMES unary_expression
    (33) factor -> . factor MOD unary_expression
    (34) factor -> . unary_expression
    (35) factor -> . factor DIV unary_expression
    (36) unary_expression -> . PLUS symbol_number
    (37) unary_expression -> . MINUS symbol_number
    (38) unary_expression -> . symbol_number
    (39) unary_expression -> . LPAREN expression RPAREN
    (40) symbol_number -> . NUMBER
    (41) symbol_number -> . ID

    NOT             shift and go to state 21
    AND             shift and go to state 22
    TRUE            shift and go to state 23
    OR              shift and go to state 24
    PLUS            shift and go to state 12
    MINUS           shift and go to state 14
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 18
    ID              shift and go to state 10

    condition                      shift and go to state 58
    condition_list                 shift and go to state 80
    expression                     shift and go to state 20
    factor                         shift and go to state 13
    unary_expression               shift and go to state 15
    symbol_number                  shift and go to state 16

state 71

    (17) condition -> OR LPAREN condition_list RPAREN .

    RPAREN          reduce using rule 17 (condition -> OR LPAREN condition_list RPAREN .)
    COMMA           reduce using rule 17 (condition -> OR LPAREN condition_list RPAREN .)


state 72

    (27) if -> IF LPAREN condition RPAREN assignments ELSE assignments .

    $end            reduce using rule 27 (if -> IF LPAREN condition RPAREN assignments ELSE assignments .)


state 73

    (28) if -> IF LPAREN condition RPAREN assignments ELSE if .

    $end            reduce using rule 28 (if -> IF LPAREN condition RPAREN assignments ELSE if .)


state 74

    (6) assignments -> LBRACE assignments RBRACE .

    ELSE            reduce using rule 6 (assignments -> LBRACE assignments RBRACE .)
    $end            reduce using rule 6 (assignments -> LBRACE assignments RBRACE .)
    RBRACE          reduce using rule 6 (assignments -> LBRACE assignments RBRACE .)


state 75

    (8) assignment -> ID ASSIGN expression . SEMI
    (29) expression -> expression . PLUS factor
    (30) expression -> expression . MINUS factor

    SEMI            shift and go to state 81
    PLUS            shift and go to state 26
    MINUS           shift and go to state 27


state 76

    (9) assignment -> ID INCRE SEMI .

    LBRACE          reduce using rule 9 (assignment -> ID INCRE SEMI .)
    ID              reduce using rule 9 (assignment -> ID INCRE SEMI .)
    ELSE            reduce using rule 9 (assignment -> ID INCRE SEMI .)
    $end            reduce using rule 9 (assignment -> ID INCRE SEMI .)
    RBRACE          reduce using rule 9 (assignment -> ID INCRE SEMI .)


state 77

    (10) assignment -> ID DECRE SEMI .

    LBRACE          reduce using rule 10 (assignment -> ID DECRE SEMI .)
    ID              reduce using rule 10 (assignment -> ID DECRE SEMI .)
    ELSE            reduce using rule 10 (assignment -> ID DECRE SEMI .)
    $end            reduce using rule 10 (assignment -> ID DECRE SEMI .)
    RBRACE          reduce using rule 10 (assignment -> ID DECRE SEMI .)


state 78

    (11) assignment -> ID PE NUMBER . SEMI

    SEMI            shift and go to state 82


state 79

    (12) assignment -> ID ME NUMBER . SEMI

    SEMI            shift and go to state 83


state 80

    (18) condition_list -> condition COMMA condition_list .

    RPAREN          reduce using rule 18 (condition_list -> condition COMMA condition_list .)


state 81

    (8) assignment -> ID ASSIGN expression SEMI .

    LBRACE          reduce using rule 8 (assignment -> ID ASSIGN expression SEMI .)
    ID              reduce using rule 8 (assignment -> ID ASSIGN expression SEMI .)
    ELSE            reduce using rule 8 (assignment -> ID ASSIGN expression SEMI .)
    $end            reduce using rule 8 (assignment -> ID ASSIGN expression SEMI .)
    RBRACE          reduce using rule 8 (assignment -> ID ASSIGN expression SEMI .)


state 82

    (11) assignment -> ID PE NUMBER SEMI .

    LBRACE          reduce using rule 11 (assignment -> ID PE NUMBER SEMI .)
    ID              reduce using rule 11 (assignment -> ID PE NUMBER SEMI .)
    ELSE            reduce using rule 11 (assignment -> ID PE NUMBER SEMI .)
    $end            reduce using rule 11 (assignment -> ID PE NUMBER SEMI .)
    RBRACE          reduce using rule 11 (assignment -> ID PE NUMBER SEMI .)


state 83

    (12) assignment -> ID ME NUMBER SEMI .

    LBRACE          reduce using rule 12 (assignment -> ID ME NUMBER SEMI .)
    ID              reduce using rule 12 (assignment -> ID ME NUMBER SEMI .)
    ELSE            reduce using rule 12 (assignment -> ID ME NUMBER SEMI .)
    $end            reduce using rule 12 (assignment -> ID ME NUMBER SEMI .)
    RBRACE          reduce using rule 12 (assignment -> ID ME NUMBER SEMI .)

